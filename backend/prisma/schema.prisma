// Apyhub Database Schema
// DeFi APY Aggregator Platform

// ==============================================
// GENERATOR & DATASOURCE
// ==============================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================
// CORE MODELS
// ==============================================

// User Model - Main user entity
model User {
  id         String      @id @default(uuid())
  address    String      @unique
  email      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  portfolios Portfolio[]
  aiChats    AiChat[]

  @@index([address])
}

// Protocol Model - DeFi Protocols (Aave, Compound, etc.)
model Protocol {
  id        String       @id @default(uuid())
  name      String       @unique
  slug      String       @unique
  baseUrl   String?
  chainId   Int
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  positions LpPosition[]

  @@index([slug])
  @@index([chainId])
}

// ==============================================
// POOL & POSITION MODELS
// ==============================================

// LP Position data - Core pool information
model LpPosition {
  id         String   @id @default(uuid())
  protocolId String
  protocol   Protocol @relation(fields: [protocolId], references: [id])

  // Position identifiers
  poolAddress   String
  poolName      String
  token0Symbol  String
  token1Symbol  String
  token0Address String
  token1Address String

  // Metrics
  apy       Float
  apr       Float?
  tvlUsd    Float
  volume24h Float?
  fees24h   Float?

  // Risk metrics
  ilRisk     Float? // Impermanent loss risk score (0-100)
  auditScore Float? // Audit/security score (0-100)
  riskLevel  String? // LOW, MEDIUM, HIGH

  // Additional data
  chainId     Int
  dexName     String?
  farmRewards Json? // Array of reward tokens
  isStable    Boolean @default(false)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastFetched DateTime @default(now())

  portfolios PortfolioPosition[]

  @@unique([protocolId, poolAddress])
  @@index([apy])
  @@index([tvlUsd])
  @@index([chainId])
  @@index([token0Symbol, token1Symbol])
}

// PYUSD specific positions - Specialized for PYUSD pairs
model PyusdPosition {
  id String @id @default(uuid())

  poolName     String
  protocolName String
  apy          Float
  tvlUsd       Float

  // PYUSD specific fields
  isPrimary      Boolean @default(true) // Primary PYUSD pool
  stabilityScore Float? // Stability score for PYUSD pairs

  chainId     Int
  poolAddress String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([poolAddress, chainId])
  @@index([apy])
  @@index([isPrimary])
}

// ==============================================
// PORTFOLIO MODELS
// ==============================================

// User's portfolio
model Portfolio {
  id            String              @id @default(uuid())
  userId        String
  user          User                @relation(fields: [userId], references: [id])
  name          String
  totalValueUsd Float               @default(0)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  positions     PortfolioPosition[]

  @@index([userId])
}

// User's positions in LP pools
model PortfolioPosition {
  id          String     @id @default(uuid())
  portfolioId String
  portfolio   Portfolio  @relation(fields: [portfolioId], references: [id])
  positionId  String
  position    LpPosition @relation(fields: [positionId], references: [id])

  amountUsd    Float
  shares       Float?
  entryPrice   Float?
  currentPrice Float?
  pnlUsd       Float?
  pnlPercent   Float?

  enteredAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([portfolioId])
  @@index([positionId])
}

// ==============================================
// AI & CHAT MODELS
// ==============================================

// AI Chat history
model AiChat {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  query      String @db.Text
  response   String @db.Text
  context    Json? // Store relevant LP positions shown
  confidence Float? // AI confidence score

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

// ==============================================
// CACHE & UTILITY MODELS
// ==============================================

// Cache for API responses
model ApiCache {
  id        String   @id @default(uuid())
  endpoint  String   @unique
  data      Json
  ttl       Int      @default(60) // seconds
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([endpoint])
  @@index([expiresAt])
}
