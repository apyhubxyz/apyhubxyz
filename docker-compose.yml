services:
  # Redis Cache (for position caching)
  redis:
    image: redis:7-alpine
    container_name: apyhub-redis
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - apyhub-network

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: apyhub-postgres
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-apyhub}
      POSTGRES_USER: ${POSTGRES_USER:-apyhub}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-apyhub}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - apyhub-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: apyhub-backend
    restart: always
    env_file:
      - .env
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-apyhub}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-apyhub}?schema=public
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RPC_URL: ${RPC_URL}
      ALCHEMY_RPC_URL: ${ALCHEMY_RPC_URL}
      ZAPPER_API_KEY: ${ZAPPER_API_KEY}
      ENVIO_HYPERSYNC_API_KEY: ${ENVIO_HYPERSYNC_API_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000,https://apyhub.xyz}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      CACHE_TTL: ${CACHE_TTL:-60}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - apyhub-network
    command: sh -c "npx prisma migrate deploy && npm start"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://backend:3001/api}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://backend:3001}
        NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID:-}
    container_name: apyhub-frontend
    restart: always
    env_file:
      - .env
    ports:
      - "${FRONTEND_PORT:-3002}:3002"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001/api}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:3001}
      NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID:-}
    depends_on:
      - backend
    networks:
      - apyhub-network

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: apyhub-nginx
    restart: always
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - apyhub-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  apyhub-network:
    driver: bridge
    name: apyhub-network